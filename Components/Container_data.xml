<ClassData>
	<Name>Container</Name>
	<Inherit>DisplayObject</Inherit>
	<Properties>
		<Property>
			<Name>Width</Name>
			<ReturnType>Int32</ReturnType>
			<ShortDesc>Indicates the width of the **Container**.</ShortDesc>
			<LongDesc>
				<![CDATA[Indicates the width of the **Container**.
				
In it's default implementation, the container will clamp the drawing of it's children to the **Width** and **Height** specified, much like a drwing mask in a drawing software
]]>
			</LongDesc>
			<ReadOnly>false</ReadOnly>
			<Default>0</Default>
		</Property>
		<Property>
			<Name>Height</Name>
			<ReturnType>Int32</ReturnType>
			<ShortDesc>Indicates the height of the **Container**.</ShortDesc>
			<LongDesc>
				<![CDATA[Indicates the height of the **Container**.
				
In it's default implementation, the container will clamp the drawing of it's children to the **Width** and **Height** specified, much like a drwing mask in a drawing software
]]>
			</LongDesc>
			<ReadOnly>false</ReadOnly>
			<Default>0</Default>
		</Property>
	</Properties>
	<Methods>
		<Method>
			<Name>GetAllChildren</Name>
			<ReturnType>
				<![CDATA[IEnumerable<DisplayObject>]]>
			</ReturnType>
			<ShortDesc>Return a flatened list of the **Container** childrens.</ShortDesc>
			<LongDesc>
				<![CDATA[Return a flatened list of the container childrens.
				
The list is a recursive search of all direct displayObject children and of all container children GetAllChildren() results.
]]>
			</LongDesc>
			<Parameters/>
		</Method>
		<Method>
			<Name>AddChild</Name>
			<ReturnType>void</ReturnType>
			<ShortDesc>Add a DisplayObject to the **Container**.</ShortDesc>
			<LongDesc>
				<![CDATA[Add a DisplayObject to the container.
				
The displayObject is added to the end of the display list and will therefore be drawn last (i.e. "on top") when rendering the container.

The **child** *Parent* property will be set to the container, automaticly removing it from any other container. 

If **child** is already part of the container, nothing will happend.
]]>
			</LongDesc>
			<Parameters>
				<Parameter>
					<Name>child</Name>
					<Type>DisplayObject</Type>
					<ShortDesc>The child object to add to the display list.</ShortDesc>
					<Default/>
				</Parameter>
			</Parameters>
		</Method>
		<Method>
			<Name>RemoveChild</Name>
			<ReturnType>void</ReturnType>
			<ShortDesc>Remove a DisplayObject from the container.</ShortDesc>
			<LongDesc>
				<![CDATA[Remove a DisplayObject from the container.
				
The **child** **parent** property will be set to **null**. 

If **child** is not already part of the container, nothing will happend.
]]>
			</LongDesc>
			<Parameters>
				<Parameter>
					<Name>child</Name>
					<Type>DisplayObject</Type>
					<ShortDesc>The child object to remove of the display list</ShortDesc>
					<Default/>
				</Parameter>
			</Parameters>
		</Method>
		<Method>
			<Name>GetSiblings</Name>
			<ReturnType>
				<![CDATA[IEnumerable<DisplayObject>]]>
			</ReturnType>
			<ShortDesc>Return the container display list. (children)</ShortDesc>
			<LongDesc>
				<![CDATA[Return the container display list.
				
This method is to be overriden by classes which inherith **Container** and which have multiple separate display list (exemple : Tabs).

If the child object is not part of any of the container display list, **null** is returned.
]]>
			</LongDesc>
			<Parameters>
				<Parameter>
					<Name>child</Name>
					<Type>DisplayObject</Type>
					<ShortDesc>A child attached to the **Container**.</ShortDesc>
					<Default/>
				</Parameter>
			</Parameters>
		</Method>
		<Method>
			<Name>Render</Name>
			<ReturnType>ConsoleCharBuffer</ReturnType>
			<ShortDesc>Render the **Container** into a ConsoleCharBuffer.</ShortDesc>
			<LongDesc>
				<![CDATA[Render the **Container** into a ConsoleCharBuffer.

If the object is not **Dirty** the cached beffer will be returned.

The background of the container will be rendered first by calling **RenderContainer()** then the children in the display list on top of it.

Only the **Visible** children will be rendered. 
Their buffers will be merged one after the other, ensuring background transparency of each if needed.
]]>
			</LongDesc>
			<Parameters/>
		</Method>
		<Method>
			<Name>RenderContainer</Name>
			<ReturnType>ConsoleCharBuffer</ReturnType>
			<ShortDesc>Render the **Container** background into a ConsoleCharBuffer.</ShortDesc>
			<LongDesc>
				<![CDATA[Render the **Container** background into a ConsoleCharBuffer.

In it's base implementation, the **Container** return a transparent (i.e. empty) ConsoleCharBuffer with the **Width** and **Height** specified by the object properties.
]]>
			</LongDesc>
			<Parameters/>
		</Method>
	</Methods>
	<Events></Events>
</ClassData>